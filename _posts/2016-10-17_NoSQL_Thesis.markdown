NoSQL综述

在现在的信息时代,各种网络应用与移动应用充斥着人们的生活,支撑着商业和社会的运转.而传统的关系型数据库,由于种种限制,不再能为许多更新迅速的应用提供健全并稳定的支持,于是一些新型的数据库系统应运而生.针对不同的应用场合,有不同的数据库类型提供支持,但这些新型数据库有着一些共同点,其中较为重要的一条,即解决了传统关系型数据库不能解决的问题,于是被称为,NoSQL---Not Only SQL,也被称为非关系型数据库.
本文将从NoSQL的起源,特性,类型,益处及与关系型数据库的对比这五个方面对其进行阐述说明.

一.  起源
  不以关系对数据进行存储的方式在上个世纪60年代末期就已经出现,但非关系型数据库的浪潮出现却是在21世纪初,由于Web2.0的出现.在新的Web时代,使用者发现许多事情可以通过网络完成,催生了更多的网站与网络应用的诞生.在新型网络应用的开发过程中,开发者发现传统关系型数据库很难满足一些要求.以下几项为当时开发者在使用关系型数据库时面临的主要问题:
  1.  数据不再是完全格式化的数据.在传统桌面应用的开发过程中,一般都会对软件使用流程中的数据进行严格定义后,才会建立数据库,所以数据库所接收到的,都是严格结构化的数据.但在网络应用的开发过程中,开发者并不严格知道要收集的数据格式与数量,所以需要记录的除了结构化的数据,还有大量半结构化及非结构化的数.而关系型数据库不能处理这个问题.
  2.  开发方式的改变.传统桌面应用的开发一般使用瀑布法,长度大概为12-18个月,开发流程较长.而现代网络应用开发过程则使用敏捷开发方式(Agile),开发周期较短,迭代速度极快,一般每一到两周就会进行版本更新,代码更新,有时甚至一天数次更新.关系型数据库并不能支持这样的快速开发方式.
  3.  用户范围的扩展.桌面应用的开发,一般针对某些特定的用户群体,比如某些办公软件只用于某大型销售企业内部,某矿产管理软件只应用于某产业内部,等等.也就是说,其面向的用户范围较小,可能每天只在某个时间段内对某一群用户进行服务,那么数据库并不需要提供7x24的健壮服务.而现代网络应用,则面向的有可能是来自全世界各个时域各个地区的用户,这就意味着需要每分每秒数据库都要提供稳健的服务.而关系型数据库则难以实现.
  4.  集群方式的转变.桌面应用的时代,数据库所在的服务器(刀片机)的一般集群方式是多刀片统一部署的机房.而到了现在,绝大多数网络应用与网站都会选择云服务器,其物理实体与真实部署方式不可知,但却能提供可靠的虚拟服务器支持.所以开发者在将数据库分布在服务器时,也面临了关系型数据库难以进行横向拓展的问题.
  以上是在Web2.0时代,网络开发者在开发过程中使用关系型数据库遇到的主要问题.
  非关系型数据的发展历史并不长久,NoSQL这个词的第一次提出,是在1998年,Carlo Strozzi使用NoSQL来命名他自己写的一个不支持SQL(Structured Query Language)语言的关系型数据库.当然,这个词语的本意即为'Not SQL',非SQL语言支持.为了解决开发者所遇到的上述问题,许多公司与个人开发者都相继推出了自己的数据存储解决方案,均有非关系性数据库的一些特性,但名称上并不统一.在2009年,Johan Oskarsson在其组织的一次关于"开源,分布,非关系型数据库"的活动中,重新定义了'NoSQL',用以表达对这种开源的,分布式的,非关系型数据存储方式的迫切需求.自此,NoSQL就沿用了这样的定义.
  截至2015年,开发者中最流行的非关系型数据库是MongoDB, Apache Canssandra和Redis.

二.  特性
  如上文所述,为了解决开发人员遇到的上述问题,许多公司与个人开发者相继推出了自己的数据存储方案,一路发展,成为现在统称为"非关系型数据库"的产品.这些数据库虽然各个均有其特点,但有些特性是他们共享的,以下将一一列举:
  1.  Dynamic Schema(动态模式).即可在不预先定义数据结构的情况下直接进行数据操作.在关系型数据库进行数据操作时,必须先定义数据结构才能对其进行数据操作,即必须先定义表结构才可能对数据进行插入或删改,并且插入的数据是严格结构化的数据.而在非关系型数据库中,采用动态模式使数据操作变得更为简单,无需预先定义数据结构即可插入数据,并且对插入的数据无严格要就,可为结构化,也可为非结构化或半结构化数据.
  2.  Horizontal Scalability(水平拓展).在对关系型数据库进行多服务器部署时,往往是将多台服务器连在一起,只由其中一个数据库管理系统将数台服务器视为一台服务器,进行拓展.也就是说,虽然是数台服务器,但在数据库管理系统层面,仍是一台,此为纵向拓展.非关系型数据库实现了横向拓展,当开发者在服务器集群增加一台服务器并将对应的数据库实例运行时,新加入的服务器是以'同事'的关系加入了原有的数据库服务器集群,实现了水平的拓展.各个服务器上所运行的数据库实例并向运行,互相之间并无从属关系.同时,由于许多新的非关系型数据库支持自动拓展,即无需进行额外配置,可实现即插即用.
  3.  Auto Sharding(自动分片).当单个数据库所存储数据过多时,对该数据库的操作将不可避免的变慢.考虑一个存有千万条数据的数据库,其大小可能在数百GB,但单次操作有可能遍历整个数据库,这将使性能极大下降.为了避免类似事件,有必要在数据量达到某阈值时,对数据进行切分管理,即分片.在关系型数据库中,分片行为由数据库管理员实现,即开发者需手动实现数据分片,这就需要开发队伍花费额外时间开发分片代码,分布在不同的服务器上,并需处理分片错误等.而非关系型数据库大多支持自动分片,即当数据量达到了阈值,数据库会自动将库内数据分片,迁移至其他服务器,并保证该过程中的数据ACID性.帮助开发者将更多精力放在主要事务上.
  4.  Asynchronous(异步复制).由于云服务器的存在,数据往往并不集中存在于某一个数据节点上,而对数据的操作也难以实现关系型数据库的全局一致性.所以在进行数据操作时,采取异步复制的方式实现.在用户对数据进行操作(如插入新数据)时,往往会由较近的本地数据库进行操作,并将操作记录至日志,然后等到同步时间点,待分布在其他服务器的数据库将其工作日志日志同步后,其他数据库通过日志进行数据恢复.即通过异步复制实现数据一致性.
  当然,面对第一部分所提出的问题,非关系型数据库还有自动分区(将记录分散在多个节点提高并行性能),弹性拓展(动态增加或删除节点),无共享架构(将数据划分后存储各个本地服务器上)等特性.这些特性都极大的提升了非关系型数据库的服务性能.

三.  类型
  关系型数据库的产品很多,但其种类却较为一致,均是关系型数据存储方式.而非关系型数据库的产品,由于各个所解决的问题方向不一,所以其分类达十数种之多.其中最为常见的,网络应用中所应用最多的,是以下四种.
  1.  键值型(Key-Value).键值型数据库采用了哈希表(或称字典)作为其基础数据模型.在其数据模型中,数据被以键值对的形式存储,且在一个数据集中,键只可出现一次.键值模型是最为简单的数据模型之一,许多数据模型都是以键值型为基础所建立.不少键值型数据库产品被应用于搜索等领域,因为其检索过程速度快,并且键与值关联度较高,所以适合做为搜索关键字的建议列表.键值型数据库中,较为出名的产品为Redis和Riak.
  2.  文档型(Key-Document).文档型数据库可以说是键值型数据库的拓展,不过每个键所对应的,不再是单一的值,而是一个半结构化的文档(JSON或XML或YAML等).由于是半结构化的文档,所以用户有可能对文档中的数据进行查询,数据库一般都会提供了统一的API或查询语言来帮助用户实现对文档内容的检索.文档型数据库在网络应用中使用较广,其中较为知名的产品有MongoDB.
  3.  图存储(Graph).图存储数据库,是用来存储拥有数据节点及其之间关系的数据网络图而被研发的.这种数据网络图,有可能是人际关系网,公共交通网络,或拓扑结构等.其中较为知名的产品有Neo4J和AllegroGraph.
  4.  列存储(Column).列存储数据库一般应用于分布式存储的海量数据.在列存储数据库中,依然存在关系数据库中的键,但其指向多个列.列存储数据库由于是对海量数据进行存储,所以其对查询进行了优化,性能提升不少.列存储数据库中较为知名的有Cassandra与HBase.
  针对以上四种类型的非关系型数据库,其使用场合,优劣等,特做了下图为对比.


四.  优劣
  非关系型数据库是为了解决网络应用开发时在关系型数据库上遇到的问题而出现的,其优劣也与其起源有着极大的关系,下面就将总结它的优势与不足.
  优势:
  1.  可存储非结构化数据.这是在21世纪初期关系型数据库在网络应用开发上遇到的最大的问题,也是非关系型数据库较大的一个优点.动态模式的特性使半结构化,非结构化数据的动态插入有了可能性.极大帮助了开发者收集所有想要的数据.
  2.  对快速开发方式的支持.由于敏捷开发方式往往会带来存储数据的结构变化或对原有数据的修改,传统关系型数据库对敏捷开发的支持性很差.而动态模式的存在,则解决了这个开发过程中数据结构转变的问题,增加了非关系型数据库本身对快速开发的支持.
  3.  地理分布式.在传统关系型数据库时代,由于难以实现水平拓展,所以数据库的拓展往往是以垂直方式对服务器进行升级,难以实现地理分布式.现代的非关系型数据库,有水平拓展性这一特性,使得在地理上广域地分布服务器成为可能.在不同地域分布数据库服务器,并可以从逻辑上视其为一个整体.
  4.  面向对象.多数非关系型数据库采用面向对象接口,为开发者提供了更多的便利性,也更为易用.
  劣势:
  1.  不支持SQL语言.从NoSQL的起源开始,几乎所有的非关系型数据库产品都不支持统一的SQL语言,这在无形中增加了使用者的学习难度,因为不同的非关系型数据库一般都会提供彼此不同的查询接口或查询语言,这就为使用带来了一些难度.并且由于操作语言不一,各个产品对操作语言的护理系能,即检索性能也互不一样,难以得到较好的一致性体验.
  2.  特性有限.由于多数非关系型数据库发展时间较短,没有关系型数据库产品发展时间长,故产品特性较为有限,相比于较为成熟的关系型数据库,其支持的特性较为核心且简单.现阶段较难进行高级拓展.
  3.  产品不够丰富.与其发展时间相关,没有形成较多成熟的产品.

五.  对比
  为了较为直观的展示关系型数据库与非关系型数据库的区别,特制作了一个对比表,如下表所所示
